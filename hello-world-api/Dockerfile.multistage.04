#  DESCRIPTION
#   - Multi-Stage
#   - Aproach : BUILD and RUNTIME
#   - Use a optimized image
#   - Best Practices Build
#   - Copy over the built artifact from the build image


# ----- Stage 1: development -----

# Pull official base image
FROM node:18-alpine As development

# Set work directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY --chown=node:node package*.json ./

# Install depehndencies
RUN npm ci

# Copy the app.js to /app directory
COPY --chown=node:node app.js /app

# Use the node user from the image (instead of the root user)
# By default, if you don't specify a USER instruction in your Dockerfile, the image will run using the root permissions. This is a security risk, so we'll add a USER instruction to our Dockerfile.
# The node image we're using already has a user created for us called node
USER node





# ----- Stage 2: build -----

# Pull official for production build
FROM node:18-alpine As build

# Setup working directory /app
WORKDIR /app

# Copy the application with its dependencies into a distroless image
COPY --chown=node:node package*.json ./

# In order to run `npm run build` we need access to the Nest CLI which is a dev dependency. In the previous development stage we ran `npm ci` which installed all dependencies, so we can copy over the node_modules directory from the development image
COPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules

COPY --chown=node:node . .

# Run the build command which creates the production bundle
RUN npm run build

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
# "npm ci is similar to npm install, except it's meant to be used in automated environments such as test platforms, continuous integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies."
RUN npm ci --only=production && npm cache clean --force


USER node





# ----- Stage 3: production -----

FROM node:18-alpine As production

# Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=build /usr/src/app/dist ./dist

# Expose port 8080 for the app.js
EXPOSE 8080

# Start the app.js
# Start the server using the production build
CMD [ "node", "dist/app.js" ]